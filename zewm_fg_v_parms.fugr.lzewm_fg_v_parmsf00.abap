*----------------------------------------------------------------------*
* Title :
* Copyright (c) 2024 ProLogic LA S.C. All rights reserved
*----------------------------------------------------------------------*
* Project Rel. :Indumotora
* Author : Alberto Maga√±a
*----------------------------------------------------------------------*
* Program description:
* 
*----------------------------------------------------------------------*
*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZEWM_V_PENH.....................................*
FORM GET_DATA_ZEWM_V_PENH.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PENH WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PENH .
ZEWM_V_PENH-MANDT =
ZEWM_T_PENH-MANDT .
ZEWM_V_PENH-KEYENH =
ZEWM_T_PENH-KEYENH .
    SELECT SINGLE * FROM ZEWM_T_PENHT WHERE
KEYENH = ZEWM_T_PENH-KEYENH AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_PENH-ENHTXT =
ZEWM_T_PENHT-ENHTXT .
ZEWM_V_PENH-RICEFW =
ZEWM_T_PENHT-RICEFW .
    ENDIF.
<VIM_TOTAL_STRUC> = ZEWM_V_PENH.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PENH .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PENH.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PENH-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PENH WHERE
  KEYENH = ZEWM_V_PENH-KEYENH .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PENH .
    ENDIF.
    DELETE FROM ZEWM_T_PENHT WHERE
    KEYENH = ZEWM_T_PENH-KEYENH .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PENH WHERE
  KEYENH = ZEWM_V_PENH-KEYENH .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PENH.
    ENDIF.
ZEWM_T_PENH-MANDT =
ZEWM_V_PENH-MANDT .
ZEWM_T_PENH-KEYENH =
ZEWM_V_PENH-KEYENH .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PENH ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PENH .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PENHT WHERE
    KEYENH = ZEWM_T_PENH-KEYENH AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZEWM_T_PENHT.
ZEWM_T_PENHT-KEYENH =
ZEWM_T_PENH-KEYENH .
ZEWM_T_PENHT-SPRAS =
SY-LANGU .
      ENDIF.
ZEWM_T_PENHT-ENHTXT =
ZEWM_V_PENH-ENHTXT .
ZEWM_T_PENHT-RICEFW =
ZEWM_V_PENH-RICEFW .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PENHT ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PENHT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PENH-UPD_FLAG,
STATUS_ZEWM_V_PENH-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PENH.
  SELECT SINGLE * FROM ZEWM_T_PENH WHERE
KEYENH = ZEWM_V_PENH-KEYENH .
ZEWM_V_PENH-MANDT =
ZEWM_T_PENH-MANDT .
ZEWM_V_PENH-KEYENH =
ZEWM_T_PENH-KEYENH .
    SELECT SINGLE * FROM ZEWM_T_PENHT WHERE
KEYENH = ZEWM_T_PENH-KEYENH AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_PENH-ENHTXT =
ZEWM_T_PENHT-ENHTXT .
ZEWM_V_PENH-RICEFW =
ZEWM_T_PENHT-RICEFW .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZEWM_V_PENH-ENHTXT .
      CLEAR ZEWM_V_PENH-RICEFW .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PENH USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PENH-KEYENH TO
ZEWM_T_PENH-KEYENH .
MOVE ZEWM_V_PENH-MANDT TO
ZEWM_T_PENH-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PENH'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PENH TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PENH'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZEWM_T_PENH-KEYENH TO
ZEWM_T_PENHT-KEYENH .
MOVE SY-LANGU TO
ZEWM_T_PENHT-SPRAS .
MOVE ZEWM_V_PENH-MANDT TO
ZEWM_T_PENHT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PENHT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PENHT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PENHT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZEWM_V_PENHVAL..................................*
FORM GET_DATA_ZEWM_V_PENHVAL.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PKEYENH WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PENHVAL .
ZEWM_V_PENHVAL-MANDT =
ZEWM_T_PKEYENH-MANDT .
ZEWM_V_PENHVAL-LGNUM =
ZEWM_T_PKEYENH-LGNUM .
ZEWM_V_PENHVAL-KEYNAM =
ZEWM_T_PKEYENH-KEYNAM .
ZEWM_V_PENHVAL-KEYNUM =
ZEWM_T_PKEYENH-KEYNUM .
ZEWM_V_PENHVAL-KEYENH =
ZEWM_T_PKEYENH-KEYENH .
    SELECT SINGLE * FROM ZEWM_T_PVAL WHERE
LGNUM = ZEWM_T_PKEYENH-LGNUM AND
KEYNAM = ZEWM_T_PKEYENH-KEYNAM AND
KEYNUM = ZEWM_T_PKEYENH-KEYNUM .
    IF SY-SUBRC EQ 0.
    ENDIF.
<VIM_TOTAL_STRUC> = ZEWM_V_PENHVAL.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PENHVAL .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PENHVAL.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PENHVAL-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEYENH WHERE
  LGNUM = ZEWM_V_PENHVAL-LGNUM AND
  KEYNAM = ZEWM_V_PENHVAL-KEYNAM AND
  KEYNUM = ZEWM_V_PENHVAL-KEYNUM AND
  KEYENH = ZEWM_V_PENHVAL-KEYENH .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PKEYENH .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEYENH WHERE
  LGNUM = ZEWM_V_PENHVAL-LGNUM AND
  KEYNAM = ZEWM_V_PENHVAL-KEYNAM AND
  KEYNUM = ZEWM_V_PENHVAL-KEYNUM AND
  KEYENH = ZEWM_V_PENHVAL-KEYENH .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PKEYENH.
    ENDIF.
ZEWM_T_PKEYENH-MANDT =
ZEWM_V_PENHVAL-MANDT .
ZEWM_T_PKEYENH-LGNUM =
ZEWM_V_PENHVAL-LGNUM .
ZEWM_T_PKEYENH-KEYNAM =
ZEWM_V_PENHVAL-KEYNAM .
ZEWM_T_PKEYENH-KEYNUM =
ZEWM_V_PENHVAL-KEYNUM .
ZEWM_T_PKEYENH-KEYENH =
ZEWM_V_PENHVAL-KEYENH .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PKEYENH ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PKEYENH .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PENHVAL-UPD_FLAG,
STATUS_ZEWM_V_PENHVAL-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PENHVAL.
  SELECT SINGLE * FROM ZEWM_T_PKEYENH WHERE
LGNUM = ZEWM_V_PENHVAL-LGNUM AND
KEYNAM = ZEWM_V_PENHVAL-KEYNAM AND
KEYNUM = ZEWM_V_PENHVAL-KEYNUM AND
KEYENH = ZEWM_V_PENHVAL-KEYENH .
ZEWM_V_PENHVAL-MANDT =
ZEWM_T_PKEYENH-MANDT .
ZEWM_V_PENHVAL-LGNUM =
ZEWM_T_PKEYENH-LGNUM .
ZEWM_V_PENHVAL-KEYNAM =
ZEWM_T_PKEYENH-KEYNAM .
ZEWM_V_PENHVAL-KEYNUM =
ZEWM_T_PKEYENH-KEYNUM .
ZEWM_V_PENHVAL-KEYENH =
ZEWM_T_PKEYENH-KEYENH .
    SELECT SINGLE * FROM ZEWM_T_PVAL WHERE
LGNUM = ZEWM_T_PKEYENH-LGNUM AND
KEYNAM = ZEWM_T_PKEYENH-KEYNAM AND
KEYNUM = ZEWM_T_PKEYENH-KEYNUM .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PENHVAL USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PENHVAL-LGNUM TO
ZEWM_T_PKEYENH-LGNUM .
MOVE ZEWM_V_PENHVAL-KEYNAM TO
ZEWM_T_PKEYENH-KEYNAM .
MOVE ZEWM_V_PENHVAL-KEYNUM TO
ZEWM_T_PKEYENH-KEYNUM .
MOVE ZEWM_V_PENHVAL-KEYENH TO
ZEWM_T_PKEYENH-KEYENH .
MOVE ZEWM_V_PENHVAL-MANDT TO
ZEWM_T_PKEYENH-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PKEYENH'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PKEYENH TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PKEYENH'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZEWM_V_PENHVAL USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZEWM_T_PKEYENH-MANDT =
ZEWM_V_PENHVAL-MANDT .
ZEWM_T_PKEYENH-LGNUM =
ZEWM_V_PENHVAL-LGNUM .
ZEWM_T_PKEYENH-KEYNAM =
ZEWM_V_PENHVAL-KEYNAM .
ZEWM_T_PKEYENH-KEYNUM =
ZEWM_V_PENHVAL-KEYNUM .
ZEWM_T_PKEYENH-KEYENH =
ZEWM_V_PENHVAL-KEYENH .
    SELECT SINGLE * FROM ZEWM_T_PVAL WHERE
LGNUM = ZEWM_T_PKEYENH-LGNUM AND
KEYNAM = ZEWM_T_PKEYENH-KEYNAM AND
KEYNUM = ZEWM_T_PKEYENH-KEYNUM .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: ZEWM_V_PKEY.....................................*
FORM GET_DATA_ZEWM_V_PKEY.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PKEY WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PKEY .
ZEWM_V_PKEY-MANDT =
ZEWM_T_PKEY-MANDT .
ZEWM_V_PKEY-KEYNAM =
ZEWM_T_PKEY-KEYNAM .
ZEWM_V_PKEY-FLG_LGTYP =
ZEWM_T_PKEY-FLG_LGTYP .
ZEWM_V_PKEY-FLG_LGBER =
ZEWM_T_PKEY-FLG_LGBER .
ZEWM_V_PKEY-FLG_LGPLA =
ZEWM_T_PKEY-FLG_LGPLA .
ZEWM_V_PKEY-FLG_LPTYP =
ZEWM_T_PKEY-FLG_LPTYP .
ZEWM_V_PKEY-FLG_VLTYP =
ZEWM_T_PKEY-FLG_VLTYP .
ZEWM_V_PKEY-FLG_VLBER =
ZEWM_T_PKEY-FLG_VLBER .
ZEWM_V_PKEY-FLG_VLPLA =
ZEWM_T_PKEY-FLG_VLPLA .
ZEWM_V_PKEY-FLG_NLTYP =
ZEWM_T_PKEY-FLG_NLTYP .
ZEWM_V_PKEY-FLG_NLBER =
ZEWM_T_PKEY-FLG_NLBER .
ZEWM_V_PKEY-FLG_NLPLA =
ZEWM_T_PKEY-FLG_NLPLA .
ZEWM_V_PKEY-FLG_PROCTY =
ZEWM_T_PKEY-FLG_PROCTY .
ZEWM_V_PKEY-FLG_SQUIT =
ZEWM_T_PKEY-FLG_SQUIT .
ZEWM_V_PKEY-FLG_FLGHUTO =
ZEWM_T_PKEY-FLG_FLGHUTO .
ZEWM_V_PKEY-FLG_VALUE =
ZEWM_T_PKEY-FLG_VALUE .
    SELECT SINGLE * FROM ZEWM_T_PKEYT WHERE
KEYNAM = ZEWM_T_PKEY-KEYNAM AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_PKEY-KEYTXT =
ZEWM_T_PKEYT-KEYTXT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZEWM_V_PKEY.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PKEY .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PKEY.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PKEY-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEY WHERE
  KEYNAM = ZEWM_V_PKEY-KEYNAM .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PKEY .
    ENDIF.
    DELETE FROM ZEWM_T_PKEYT WHERE
    KEYNAM = ZEWM_T_PKEY-KEYNAM .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEY WHERE
  KEYNAM = ZEWM_V_PKEY-KEYNAM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PKEY.
    ENDIF.
ZEWM_T_PKEY-MANDT =
ZEWM_V_PKEY-MANDT .
ZEWM_T_PKEY-KEYNAM =
ZEWM_V_PKEY-KEYNAM .
ZEWM_T_PKEY-FLG_LGTYP =
ZEWM_V_PKEY-FLG_LGTYP .
ZEWM_T_PKEY-FLG_LGBER =
ZEWM_V_PKEY-FLG_LGBER .
ZEWM_T_PKEY-FLG_LGPLA =
ZEWM_V_PKEY-FLG_LGPLA .
ZEWM_T_PKEY-FLG_LPTYP =
ZEWM_V_PKEY-FLG_LPTYP .
ZEWM_T_PKEY-FLG_VLTYP =
ZEWM_V_PKEY-FLG_VLTYP .
ZEWM_T_PKEY-FLG_VLBER =
ZEWM_V_PKEY-FLG_VLBER .
ZEWM_T_PKEY-FLG_VLPLA =
ZEWM_V_PKEY-FLG_VLPLA .
ZEWM_T_PKEY-FLG_NLTYP =
ZEWM_V_PKEY-FLG_NLTYP .
ZEWM_T_PKEY-FLG_NLBER =
ZEWM_V_PKEY-FLG_NLBER .
ZEWM_T_PKEY-FLG_NLPLA =
ZEWM_V_PKEY-FLG_NLPLA .
ZEWM_T_PKEY-FLG_PROCTY =
ZEWM_V_PKEY-FLG_PROCTY .
ZEWM_T_PKEY-FLG_SQUIT =
ZEWM_V_PKEY-FLG_SQUIT .
ZEWM_T_PKEY-FLG_FLGHUTO =
ZEWM_V_PKEY-FLG_FLGHUTO .
ZEWM_T_PKEY-FLG_VALUE =
ZEWM_V_PKEY-FLG_VALUE .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PKEY ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PKEY .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEYT WHERE
    KEYNAM = ZEWM_T_PKEY-KEYNAM AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZEWM_T_PKEYT.
ZEWM_T_PKEYT-KEYNAM =
ZEWM_T_PKEY-KEYNAM .
ZEWM_T_PKEYT-SPRAS =
SY-LANGU .
      ENDIF.
ZEWM_T_PKEYT-KEYTXT =
ZEWM_V_PKEY-KEYTXT .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PKEYT ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PKEYT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PKEY-UPD_FLAG,
STATUS_ZEWM_V_PKEY-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PKEY.
  SELECT SINGLE * FROM ZEWM_T_PKEY WHERE
KEYNAM = ZEWM_V_PKEY-KEYNAM .
ZEWM_V_PKEY-MANDT =
ZEWM_T_PKEY-MANDT .
ZEWM_V_PKEY-KEYNAM =
ZEWM_T_PKEY-KEYNAM .
ZEWM_V_PKEY-FLG_LGTYP =
ZEWM_T_PKEY-FLG_LGTYP .
ZEWM_V_PKEY-FLG_LGBER =
ZEWM_T_PKEY-FLG_LGBER .
ZEWM_V_PKEY-FLG_LGPLA =
ZEWM_T_PKEY-FLG_LGPLA .
ZEWM_V_PKEY-FLG_LPTYP =
ZEWM_T_PKEY-FLG_LPTYP .
ZEWM_V_PKEY-FLG_VLTYP =
ZEWM_T_PKEY-FLG_VLTYP .
ZEWM_V_PKEY-FLG_VLBER =
ZEWM_T_PKEY-FLG_VLBER .
ZEWM_V_PKEY-FLG_VLPLA =
ZEWM_T_PKEY-FLG_VLPLA .
ZEWM_V_PKEY-FLG_NLTYP =
ZEWM_T_PKEY-FLG_NLTYP .
ZEWM_V_PKEY-FLG_NLBER =
ZEWM_T_PKEY-FLG_NLBER .
ZEWM_V_PKEY-FLG_NLPLA =
ZEWM_T_PKEY-FLG_NLPLA .
ZEWM_V_PKEY-FLG_PROCTY =
ZEWM_T_PKEY-FLG_PROCTY .
ZEWM_V_PKEY-FLG_SQUIT =
ZEWM_T_PKEY-FLG_SQUIT .
ZEWM_V_PKEY-FLG_FLGHUTO =
ZEWM_T_PKEY-FLG_FLGHUTO .
ZEWM_V_PKEY-FLG_VALUE =
ZEWM_T_PKEY-FLG_VALUE .
    SELECT SINGLE * FROM ZEWM_T_PKEYT WHERE
KEYNAM = ZEWM_T_PKEY-KEYNAM AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_PKEY-KEYTXT =
ZEWM_T_PKEYT-KEYTXT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZEWM_V_PKEY-KEYTXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PKEY USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PKEY-KEYNAM TO
ZEWM_T_PKEY-KEYNAM .
MOVE ZEWM_V_PKEY-MANDT TO
ZEWM_T_PKEY-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PKEY'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PKEY TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PKEY'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZEWM_T_PKEY-KEYNAM TO
ZEWM_T_PKEYT-KEYNAM .
MOVE SY-LANGU TO
ZEWM_T_PKEYT-SPRAS .
MOVE ZEWM_V_PKEY-MANDT TO
ZEWM_T_PKEYT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PKEYT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PKEYT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PKEYT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZEWM_V_PKEY00...................................*
FORM GET_DATA_ZEWM_V_PKEY00.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PKEYT300 WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PKEY00 .
ZEWM_V_PKEY00-MANDT =
ZEWM_T_PKEYT300-MANDT .
ZEWM_V_PKEY00-LGNUM =
ZEWM_T_PKEYT300-LGNUM .
ZEWM_V_PKEY00-KEYNAM =
ZEWM_T_PKEYT300-KEYNAM .
<VIM_TOTAL_STRUC> = ZEWM_V_PKEY00.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PKEY00 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PKEY00.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PKEY00-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEYT300 WHERE
  LGNUM = ZEWM_V_PKEY00-LGNUM AND
  KEYNAM = ZEWM_V_PKEY00-KEYNAM .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PKEYT300 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKEYT300 WHERE
  LGNUM = ZEWM_V_PKEY00-LGNUM AND
  KEYNAM = ZEWM_V_PKEY00-KEYNAM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PKEYT300.
    ENDIF.
ZEWM_T_PKEYT300-MANDT =
ZEWM_V_PKEY00-MANDT .
ZEWM_T_PKEYT300-LGNUM =
ZEWM_V_PKEY00-LGNUM .
ZEWM_T_PKEYT300-KEYNAM =
ZEWM_V_PKEY00-KEYNAM .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PKEYT300 ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PKEYT300 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PKEY00-UPD_FLAG,
STATUS_ZEWM_V_PKEY00-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PKEY00.
  SELECT SINGLE * FROM ZEWM_T_PKEYT300 WHERE
LGNUM = ZEWM_V_PKEY00-LGNUM AND
KEYNAM = ZEWM_V_PKEY00-KEYNAM .
ZEWM_V_PKEY00-MANDT =
ZEWM_T_PKEYT300-MANDT .
ZEWM_V_PKEY00-LGNUM =
ZEWM_T_PKEYT300-LGNUM .
ZEWM_V_PKEY00-KEYNAM =
ZEWM_T_PKEYT300-KEYNAM .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PKEY00 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PKEY00-LGNUM TO
ZEWM_T_PKEYT300-LGNUM .
MOVE ZEWM_V_PKEY00-KEYNAM TO
ZEWM_T_PKEYT300-KEYNAM .
MOVE ZEWM_V_PKEY00-MANDT TO
ZEWM_T_PKEYT300-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PKEYT300'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PKEYT300 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PKEYT300'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZEWM_V_PKFIL....................................*
FORM GET_DATA_ZEWM_V_PKFIL.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PKFILENH WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PKFIL .
ZEWM_V_PKFIL-MANDT =
ZEWM_T_PKFILENH-MANDT .
ZEWM_V_PKFIL-LGNUM =
ZEWM_T_PKFILENH-LGNUM .
ZEWM_V_PKFIL-KEYNAM =
ZEWM_T_PKFILENH-KEYNAM .
ZEWM_V_PKFIL-KEYNUM =
ZEWM_T_PKFILENH-KEYNUM .
ZEWM_V_PKFIL-KEYFIL =
ZEWM_T_PKFILENH-KEYFIL .
<VIM_TOTAL_STRUC> = ZEWM_V_PKFIL.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PKFIL .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PKFIL.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PKFIL-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKFILENH WHERE
  LGNUM = ZEWM_V_PKFIL-LGNUM AND
  KEYNAM = ZEWM_V_PKFIL-KEYNAM AND
  KEYNUM = ZEWM_V_PKFIL-KEYNUM AND
  KEYFIL = ZEWM_V_PKFIL-KEYFIL .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PKFILENH .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PKFILENH WHERE
  LGNUM = ZEWM_V_PKFIL-LGNUM AND
  KEYNAM = ZEWM_V_PKFIL-KEYNAM AND
  KEYNUM = ZEWM_V_PKFIL-KEYNUM AND
  KEYFIL = ZEWM_V_PKFIL-KEYFIL .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PKFILENH.
    ENDIF.
ZEWM_T_PKFILENH-MANDT =
ZEWM_V_PKFIL-MANDT .
ZEWM_T_PKFILENH-LGNUM =
ZEWM_V_PKFIL-LGNUM .
ZEWM_T_PKFILENH-KEYNAM =
ZEWM_V_PKFIL-KEYNAM .
ZEWM_T_PKFILENH-KEYNUM =
ZEWM_V_PKFIL-KEYNUM .
ZEWM_T_PKFILENH-KEYFIL =
ZEWM_V_PKFIL-KEYFIL .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PKFILENH ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PKFILENH .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PKFIL-UPD_FLAG,
STATUS_ZEWM_V_PKFIL-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PKFIL.
  SELECT SINGLE * FROM ZEWM_T_PKFILENH WHERE
LGNUM = ZEWM_V_PKFIL-LGNUM AND
KEYNAM = ZEWM_V_PKFIL-KEYNAM AND
KEYNUM = ZEWM_V_PKFIL-KEYNUM AND
KEYFIL = ZEWM_V_PKFIL-KEYFIL .
ZEWM_V_PKFIL-MANDT =
ZEWM_T_PKFILENH-MANDT .
ZEWM_V_PKFIL-LGNUM =
ZEWM_T_PKFILENH-LGNUM .
ZEWM_V_PKFIL-KEYNAM =
ZEWM_T_PKFILENH-KEYNAM .
ZEWM_V_PKFIL-KEYNUM =
ZEWM_T_PKFILENH-KEYNUM .
ZEWM_V_PKFIL-KEYFIL =
ZEWM_T_PKFILENH-KEYFIL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PKFIL USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PKFIL-LGNUM TO
ZEWM_T_PKFILENH-LGNUM .
MOVE ZEWM_V_PKFIL-KEYNAM TO
ZEWM_T_PKFILENH-KEYNAM .
MOVE ZEWM_V_PKFIL-KEYNUM TO
ZEWM_T_PKFILENH-KEYNUM .
MOVE ZEWM_V_PKFIL-KEYFIL TO
ZEWM_T_PKFILENH-KEYFIL .
MOVE ZEWM_V_PKFIL-MANDT TO
ZEWM_T_PKFILENH-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PKFILENH'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PKFILENH TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PKFILENH'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZEWM_V_PVAL.....................................*
FORM GET_DATA_ZEWM_V_PVAL.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEWM_T_PVAL WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_PVAL .
ZEWM_V_PVAL-MANDT =
ZEWM_T_PVAL-MANDT .
ZEWM_V_PVAL-LGNUM =
ZEWM_T_PVAL-LGNUM .
ZEWM_V_PVAL-KEYNAM =
ZEWM_T_PVAL-KEYNAM .
ZEWM_V_PVAL-KEYNUM =
ZEWM_T_PVAL-KEYNUM .
ZEWM_V_PVAL-STC_LGTYP =
ZEWM_T_PVAL-STC_LGTYP .
ZEWM_V_PVAL-STC_LGBER =
ZEWM_T_PVAL-STC_LGBER .
ZEWM_V_PVAL-STC_LGPLA =
ZEWM_T_PVAL-STC_LGPLA .
ZEWM_V_PVAL-STC_LPTYP =
ZEWM_T_PVAL-STC_LPTYP .
ZEWM_V_PVAL-STC_VLTYP =
ZEWM_T_PVAL-STC_VLTYP .
ZEWM_V_PVAL-STC_VLBER =
ZEWM_T_PVAL-STC_VLBER .
ZEWM_V_PVAL-STC_VLPLA =
ZEWM_T_PVAL-STC_VLPLA .
ZEWM_V_PVAL-STC_NLTYP =
ZEWM_T_PVAL-STC_NLTYP .
ZEWM_V_PVAL-STC_NLBER =
ZEWM_T_PVAL-STC_NLBER .
ZEWM_V_PVAL-STC_NLPLA =
ZEWM_T_PVAL-STC_NLPLA .
ZEWM_V_PVAL-STC_PROCTY =
ZEWM_T_PVAL-STC_PROCTY .
ZEWM_V_PVAL-STC_SQUIT =
ZEWM_T_PVAL-STC_SQUIT .
ZEWM_V_PVAL-STC_FLGHUTO =
ZEWM_T_PVAL-STC_FLGHUTO .
ZEWM_V_PVAL-STC_VALUE =
ZEWM_T_PVAL-STC_VALUE .
<VIM_TOTAL_STRUC> = ZEWM_V_PVAL.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_PVAL .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_PVAL.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_PVAL-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PVAL WHERE
  LGNUM = ZEWM_V_PVAL-LGNUM AND
  KEYNAM = ZEWM_V_PVAL-KEYNAM AND
  KEYNUM = ZEWM_V_PVAL-KEYNUM .
    IF SY-SUBRC = 0.
    DELETE ZEWM_T_PVAL .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEWM_T_PVAL WHERE
  LGNUM = ZEWM_V_PVAL-LGNUM AND
  KEYNAM = ZEWM_V_PVAL-KEYNAM AND
  KEYNUM = ZEWM_V_PVAL-KEYNUM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEWM_T_PVAL.
    ENDIF.
ZEWM_T_PVAL-MANDT =
ZEWM_V_PVAL-MANDT .
ZEWM_T_PVAL-LGNUM =
ZEWM_V_PVAL-LGNUM .
ZEWM_T_PVAL-KEYNAM =
ZEWM_V_PVAL-KEYNAM .
ZEWM_T_PVAL-KEYNUM =
ZEWM_V_PVAL-KEYNUM .
ZEWM_T_PVAL-STC_LGTYP =
ZEWM_V_PVAL-STC_LGTYP .
ZEWM_T_PVAL-STC_LGBER =
ZEWM_V_PVAL-STC_LGBER .
ZEWM_T_PVAL-STC_LGPLA =
ZEWM_V_PVAL-STC_LGPLA .
ZEWM_T_PVAL-STC_LPTYP =
ZEWM_V_PVAL-STC_LPTYP .
ZEWM_T_PVAL-STC_VLTYP =
ZEWM_V_PVAL-STC_VLTYP .
ZEWM_T_PVAL-STC_VLBER =
ZEWM_V_PVAL-STC_VLBER .
ZEWM_T_PVAL-STC_VLPLA =
ZEWM_V_PVAL-STC_VLPLA .
ZEWM_T_PVAL-STC_NLTYP =
ZEWM_V_PVAL-STC_NLTYP .
ZEWM_T_PVAL-STC_NLBER =
ZEWM_V_PVAL-STC_NLBER .
ZEWM_T_PVAL-STC_NLPLA =
ZEWM_V_PVAL-STC_NLPLA .
ZEWM_T_PVAL-STC_PROCTY =
ZEWM_V_PVAL-STC_PROCTY .
ZEWM_T_PVAL-STC_SQUIT =
ZEWM_V_PVAL-STC_SQUIT .
ZEWM_T_PVAL-STC_FLGHUTO =
ZEWM_V_PVAL-STC_FLGHUTO .
ZEWM_T_PVAL-STC_VALUE =
ZEWM_V_PVAL-STC_VALUE .
    IF SY-SUBRC = 0.
    UPDATE ZEWM_T_PVAL ##WARN_OK.
    ELSE.
    INSERT ZEWM_T_PVAL .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_PVAL-UPD_FLAG,
STATUS_ZEWM_V_PVAL-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_PVAL.
  SELECT SINGLE * FROM ZEWM_T_PVAL WHERE
LGNUM = ZEWM_V_PVAL-LGNUM AND
KEYNAM = ZEWM_V_PVAL-KEYNAM AND
KEYNUM = ZEWM_V_PVAL-KEYNUM .
ZEWM_V_PVAL-MANDT =
ZEWM_T_PVAL-MANDT .
ZEWM_V_PVAL-LGNUM =
ZEWM_T_PVAL-LGNUM .
ZEWM_V_PVAL-KEYNAM =
ZEWM_T_PVAL-KEYNAM .
ZEWM_V_PVAL-KEYNUM =
ZEWM_T_PVAL-KEYNUM .
ZEWM_V_PVAL-STC_LGTYP =
ZEWM_T_PVAL-STC_LGTYP .
ZEWM_V_PVAL-STC_LGBER =
ZEWM_T_PVAL-STC_LGBER .
ZEWM_V_PVAL-STC_LGPLA =
ZEWM_T_PVAL-STC_LGPLA .
ZEWM_V_PVAL-STC_LPTYP =
ZEWM_T_PVAL-STC_LPTYP .
ZEWM_V_PVAL-STC_VLTYP =
ZEWM_T_PVAL-STC_VLTYP .
ZEWM_V_PVAL-STC_VLBER =
ZEWM_T_PVAL-STC_VLBER .
ZEWM_V_PVAL-STC_VLPLA =
ZEWM_T_PVAL-STC_VLPLA .
ZEWM_V_PVAL-STC_NLTYP =
ZEWM_T_PVAL-STC_NLTYP .
ZEWM_V_PVAL-STC_NLBER =
ZEWM_T_PVAL-STC_NLBER .
ZEWM_V_PVAL-STC_NLPLA =
ZEWM_T_PVAL-STC_NLPLA .
ZEWM_V_PVAL-STC_PROCTY =
ZEWM_T_PVAL-STC_PROCTY .
ZEWM_V_PVAL-STC_SQUIT =
ZEWM_T_PVAL-STC_SQUIT .
ZEWM_V_PVAL-STC_FLGHUTO =
ZEWM_T_PVAL-STC_FLGHUTO .
ZEWM_V_PVAL-STC_VALUE =
ZEWM_T_PVAL-STC_VALUE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_PVAL USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_PVAL-LGNUM TO
ZEWM_T_PVAL-LGNUM .
MOVE ZEWM_V_PVAL-KEYNAM TO
ZEWM_T_PVAL-KEYNAM .
MOVE ZEWM_V_PVAL-KEYNUM TO
ZEWM_T_PVAL-KEYNUM .
MOVE ZEWM_V_PVAL-MANDT TO
ZEWM_T_PVAL-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEWM_T_PVAL'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEWM_T_PVAL TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEWM_T_PVAL'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZEWM_V_T300.....................................*
FORM GET_DATA_ZEWM_V_T300.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SCWM/T300 WHERE
(VIM_WHERETAB) .
    CLEAR ZEWM_V_T300 .
ZEWM_V_T300-MANDT =
/SCWM/T300-MANDT .
ZEWM_V_T300-LGNUM =
/SCWM/T300-LGNUM .
    SELECT SINGLE * FROM /SCWM/T300T WHERE
LGNUM = /SCWM/T300-LGNUM AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_T300-LNUMT =
/SCWM/T300T-LNUMT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZEWM_V_T300.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZEWM_V_T300 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZEWM_V_T300.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZEWM_V_T300-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SCWM/T300 WHERE
  LGNUM = ZEWM_V_T300-LGNUM .
    IF SY-SUBRC = 0.
    DELETE /SCWM/T300 .
    ENDIF.
    DELETE FROM /SCWM/T300T WHERE
    LGNUM = /SCWM/T300-LGNUM .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SCWM/T300 WHERE
  LGNUM = ZEWM_V_T300-LGNUM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SCWM/T300.
    ENDIF.
/SCWM/T300-MANDT =
ZEWM_V_T300-MANDT .
/SCWM/T300-LGNUM =
ZEWM_V_T300-LGNUM .
    IF SY-SUBRC = 0.
    UPDATE /SCWM/T300 ##WARN_OK.
    ELSE.
    INSERT /SCWM/T300 .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM /SCWM/T300T WHERE
    LGNUM = /SCWM/T300-LGNUM AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR /SCWM/T300T.
/SCWM/T300T-LGNUM =
/SCWM/T300-LGNUM .
/SCWM/T300T-SPRAS =
SY-LANGU .
      ENDIF.
/SCWM/T300T-LNUMT =
ZEWM_V_T300-LNUMT .
    IF SY-SUBRC = 0.
    UPDATE /SCWM/T300T ##WARN_OK.
    ELSE.
    INSERT /SCWM/T300T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZEWM_V_T300-UPD_FLAG,
STATUS_ZEWM_V_T300-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZEWM_V_T300.
  SELECT SINGLE * FROM /SCWM/T300 WHERE
LGNUM = ZEWM_V_T300-LGNUM .
ZEWM_V_T300-MANDT =
/SCWM/T300-MANDT .
ZEWM_V_T300-LGNUM =
/SCWM/T300-LGNUM .
    SELECT SINGLE * FROM /SCWM/T300T WHERE
LGNUM = /SCWM/T300-LGNUM AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZEWM_V_T300-LNUMT =
/SCWM/T300T-LNUMT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZEWM_V_T300-LNUMT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZEWM_V_T300 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZEWM_V_T300-LGNUM TO
/SCWM/T300-LGNUM .
MOVE ZEWM_V_T300-MANDT TO
/SCWM/T300-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SCWM/T300'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SCWM/T300 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SCWM/T300'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE /SCWM/T300-LGNUM TO
/SCWM/T300T-LGNUM .
MOVE SY-LANGU TO
/SCWM/T300T-SPRAS .
MOVE ZEWM_V_T300-MANDT TO
/SCWM/T300T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SCWM/T300T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SCWM/T300T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SCWM/T300T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
